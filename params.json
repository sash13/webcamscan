{"name":"webcamscan","tagline":"Набор скриптов для полу-автоматического поиска веб-камер в сети","body":"# webcamscan\r\nНабор скриптов для полу-автоматического поиска веб-камер в сети, умеющий искать RTSP-трансляции и делать их срины, умеющий подбирать логин-пароли для вэб-панелей, умеющий сортировать результаты и ставить тэги.\r\nПолучается примерно так:\r\n![Пример результата](http://i.imgur.com/SQy7fyo.png)\r\n\r\n___\r\n:bangbang: \r\n\r\n**ВНИМАНИЕ: Скрипт предназначен только для ознакомительных и учебных целей. Использование его может быть *противозаконным*. Используйте его на свой страх и риск с согласия всех участников.**\r\n\r\n:bangbang: \r\n___\r\n\r\n<a name=\"requestments\"></a>\r\n### Зависимости скрипта:\r\n\r\n##### Обязательно:\r\n* ~~ЖМУ/Пинус~~ GNU/Linux. Может быть и OSX, но я не пробовал.\r\n* `bash` не ниже v.4.\r\n* Команда `timeout`, сейчас она есть везде, но вдруг вы — аутист?\r\n* `pcregrep` — grep с поддержкой PCRE.\r\n* `nmap-nse` — NMap с поддержкой скриптов (NSE).\r\n* `libav` (`avprobe`, `avconv`) — Для анализа трансляций и скриншотов.\r\n\r\n##### Не обязательно:\r\n* `git`, что бы склонировать реп.\r\n* TODO: `ffmpeg` (`ffprobe`) как альтернатива `libav`.\r\n\r\n<a name=\"launching\"></a>\r\n### Запуск скриптов\r\n\r\n* `git clone https://github.com/voaoom/webcamscan.git`\r\n* `cd webcamscan`\r\n* `chmod +x ./wcs-*.sh`\r\n* Вы можете поднастроить скрипт по своему вкусу, cм. ниже.\r\n* Скрипты работают под правами суперпользователя. Это необходимо для эффективной работы `nmap`. Где гарантии, что он не сделает `rm -rf /`? Их нет, мне похуй.\r\n\r\n<a name=\"wcs-config\"></a>\r\n### wcs-config.sh — Настройки скриптов\r\n\r\nВы можете поднастроить скрипт по своему вкусу, раскомментировав и поправив в строки в файле `./wcs-config.sh`, либо же установив переменные окружения перед запуском скриптов. Будте осторожны: я не делал защиту от дебилов. Неправильные значения могут поломать скрипты и снести вашу систему. **Почитайте ниже, как скрипты работает**, что бы понимать, что  происходит.\r\nОписание параметров:\r\n* `ПАРАМЕТР=значение-по-умолчанию` — описание. Булевые значения должны быть `true` или `false`.\r\n* `NMAPDIR=.` — используется для указания `nmap`, где он работает.\r\n* `WRITE_ALL_HOSTS=true` — записывать все обнаруженные адреса в файл all_hosts.txt или нет.\r\n* `HOST_TIMELIMIT=5m` — cуммарное максимальное время затрачиваемое на один хост. Суффикс `m` означает минуты, еще можно `s` и `h` — секунды и часы. Не стоит выставлять большие значения. Скрипт не работает параллельно, так что во время тупления над одним хостом другие хосты не сканируются.\r\n* `RTSP_URLS='./rtsp-urls.txt'` — Файл с возможными URL-ами RTSP, используется для перебора. Буду очень рад, если вы поможете мне его пополнить. За основу взят стандартный файл из `nmap`.\r\n* `FIND_AUTH=true` — искать на хосте страницы с авторизацией или нет.\r\n* `BRUTEFORCE=true` — делать ли перебор логин-паролей для вэб-панели, если это возможно или нет.\r\n* `BRUTEFORCE_TIMELIMIT=2m` — максимальное время перебора логин-паролей на одном хосте. Здесь всё тоже, что и `HOST_TIMELIMIT`. Этого мало для серьёзного перебора, но находит всякие дурацкие пароли.\r\n* `LIBAV_LIMIT=4` — Ограничение на анализ трансляций (из всех обнаруженных на одной камере). Это важное ограничение, ибо некоторые можели вэб-камер начисто игнорят URL-ы, и транслируют всегда. В таком случае `nmap` найдет чуть более, чем дохуя трансляций, но на самом деле это всё будет одна и таже. Да и вообще у многих камер есть параллельные трансляции. Что бы не тратить время на анализ потоков и нарезане скриншотов, нужно это ограничение.\r\n* `LIBAV_SCREENSHOT=true` — пытаться делать скриншоты или нет.\r\n* `SAVE_NO_FLAGS=false` — сохранять информацию о хостах, у которых нет тегов или нет.\r\n* `CLEANUP=true` — удалять за собой временные файлы или нет.\r\n\r\n<a name=\"wcs-discover\"></a>\r\n### wcs-discover.sh — Первичный поиск\r\n\r\nЭтот скрипт осуществляет поиск хостов, которые могут быть вэб-камерами с большой вероятностю, но не исследует их. По-сути этот скрипт из тысяч адресов выбирает те еденицы, которые имеет смысл сканировать. Он, используя `nmap`, полностью сканирует все указанные сети на предмет открытого RTSP-порта — это с 95% вероятностью вэб-камера (1% — медиасервер, 4% — что-нибудь еще). Все обнаруженные хосты сохраняются.\r\n\r\n:information_source: **Примечание:** Этот скрипт может выполняться долго и тихо, так что я добавил сюда прогресс. Прогресс отчитывается по строкам входного файла. Каждая строка по очереди загоняется в `nmap`, так что если всё будет записано в одну строку, то прогресса не будет, а если каждый адрес на своей строке, то на каждый адрес каждый раз будет завново запускаться `nmap`. Таким образом, первый случай быстрый, но не наглядный, а второй наглядный, но медленный. При работе с файлами происходит подсчет строк и вывод осуществляется в процентах, но при чтении с `stdin` это не возможно, тогда прогресс просто подсчитывается возрастающими числами.\r\n\r\n:computer: **Синтаксис:** `./wcs-discover.sh <файл-с-целями> <файл-с-обнаруженными-хостами>`. Можно указать `-`, это означает чтение из `stdin` и запись в `stdout`. Прогресс и сообщения пользователю выводятся в `stderr` в любом случае.\r\n\r\n<a name=\"wcs-deepscan\"></a>\r\n### wcs-deepscan.sh — Глубокое сканирование\r\n\r\nЭтот скрипт, используя `nmap`, подробно сканирует найденые хосты. В звисимости от настроек, происходит:\r\n* Быстрый **перебор логин-паролей** на HTTP-панели, если такая панель обнаружена, что бы найти пары типа `admin:admin` и `root:123456`.\r\n* Поиск других страниц авторизации, если они существуют, но они **пока** не перебираются. Перебираются только те, что находятся в `/` HTTP-службы.\r\n* Быстрый **перебор известных RTSP-URL-ов**, что бы найти все возможные трансляции, но нет гарантий, что скрипт точно обнаружит их. Если он не нашел ниодной трансляции, но RTSP-сервер выглядит рабочим, то, скорее всего, там используются более хитрые URL-ы и/или авторизация. Попробуйте порыться в вэб-панели, может найдете информацию. Если ничего не получилось, то этот хост можно прогнорировать или до-взламывать вручную.\r\n* Найденые RTSP-URL-ы передаются в `avprobe` для **изучения трансляции**, а также **создаются** их **скриншоты** с помощью `avconv`. Иногда сервера ебут мозги отправляя пустые пакеты или какой-нибудь мусор, из-за чего эти две программы начинают тупить и это может растянуться на часы. На них выставлено ограничение в несколько десятков секунд, так что есть вероятность, что они не выдадут результат.\r\n* Выхлоп программ парсится, на основе чего для каждого хоста **выставляются тэги**:\r\n    * :page_facing_up: `http` — если была обнаружена хотя бы одна **работающая HTTP-служба**. От этого тэга зависят:\r\n        * :unlock: `creds` — если был обнаружен какой-то метод авторизации, был проведен перебор и он оказался успешным — учётные данные **найдены**.\r\n        * :lock: `nocreds` — если был обнаружен какой-то метод авторизации, был проведен перебор и он оказался проавльным — учётные данные **не найдены**.\r\n    * :tv: `rtsp` — если была обнаружена хотя бы одна RTSP-служба. От этого тэга зависят:\r\n        * :mag: `found` — если найден хотя бы один корректный **URL трансляции** (но не гарантируется, что в трансляции осмысленные данные). \r\n        * :camera: `video` — если найдена хотя бы одна трансляция, содержащая **видео**-поток (но не гарантируется, что в этом потоке осмысленные данные).\r\n        * :sound: `audio` — если найдена хотя бы одна трансляция, содержащая **аудио**-поток (но не гарантируется, что в этом потоке осмысленные данные).\r\n        * `il` — почему-то `libav` не всегда дружит с **Interleaved** (TCP) RTSP. Если найдена хотя бы одна такая трансляция, то выставляется этот тэг. Это **не** означает, что трансляция не работает. Она, вероятно, будет открываться с ошибками в плеерах на основе `libav`, но может корректно работать в других, например `vlc`.\r\n    * :x: `error` — какая-то ошибка, из-за которой невозможно утверждать о корректности **отрицательных** результатов. Регистрируется в следующих случаях:\r\n        * Скрипт `rtsp-url-brute` в `nmap` выкинул ошибку. Как правило, возникает, если нарушается протокол. Возможно, RTPS-служба, на самом деле не RTPS или просто она кривая и багнутая.\r\n    * Если ниодин тэг не был проставлен, значит этот хост по-видимому не представляет интереса. Таких хостов может быть очень много.\r\n    * Если зависимость тэгов нарушена, то отпишите мне. Не то что бы это был баг или типа того, ~~бака~~, возможно, этот новый неисследованый случай.\r\n* Результаты сохраняются:\r\n    * В файлы вида `<папка-выхлопа>/<адрес-хоста>_[тэг_[...]].txt` — отчёт `nmap` и отчёты `avprobe`.\r\n    * В файлы вида `<папка-выхлопа>/<адрес-хоста>_<порядковый-номер-трансляции>.jpg` — скриншот, сделаный `avconv`.\r\n    * В файл `<пака-выхлопа>/all_hosts.txt` — список всех адресов, которые сканировались на втором этапе.\r\n    * В файл `<пака-выхлопа>/all.txt` — все отчёты `nmap` и `avprobe` в хронологическом порядке.\r\n    * Если файлы уже существуют, то будет выполнена дозапись в их конец.\r\n\r\n:information_source: **Примечание:** Этот скрипт может выполняться долго и тихо, так что я добавил сюда прогресс. Прогресс отчитывается по хостам на входе. Каждый хост по очереди обрабатывается, о чем сообщается в прогрессе. Если задействуется `libav`, то появляется под-прогресс в виде точек (`.`). При работе с файлами происходит подсчет строк и вывод осуществляется в процентах, но при чтении с `stdin` это не возможно, тогда прогресс просто подсчитывается возрастающими числами.\r\n\r\n:computer: **Синтаксис:** `./wcs-deepscan.sh <файл-с-целями> <папка-выхлопа>`. В первом аргументе можно указать `-`, это означает чтение из `stdin`. Прогресс и сообщения пользователю выводятся в `stderr` в любом случае.\r\n\r\n<a name=\"wcs-full\"></a>\r\n### wcs-full.sh — Глубокое сканирование\r\n\r\nЭтот скрипт по сути эквивалентен `./wcs-discover.sh <файл-с-целями> - | ./wcs-deepscan.sh - <папка-выхлопа>`, но скрипты исполняются **не** параллельно, а последовательно. Между их выполнением, все адреса собираются во временный буфер.\r\n\r\n:computer: **Синтаксис:** `./wcs-full.sh <файл-с-целями> <папка-выхлопа>`.\r\n\r\n<a name=\"wcs-brute\"></a>\r\n### wcs-brute.sh — Подбор логин-паролей\r\n\r\nЭтот скрипт помогает подобрать логин-пароли для служб цели. Поддерживаются протоколы: `http`, `https`, `ftp`. Если порт не указан, то используются `80`, `443` и `21` соответственно. Т.е. можно просто скопировать URL из браузера и всё. Вывод не управляется: `stdout` и `stderr` под контролем `nmap`.\r\n\r\n:computer: **Синтаксис:** `./wcs-brute.sh <протокол>://<адрес>[:порт][/путь]`. \r\n\r\n<a name=\"wcs-lib\"></a>\r\n### wcs-lib.sh — Библиотека\r\n\r\nДля внутреннего использования. Вам не следует трогать это.\r\n\r\n<a name=\"bugs\"></a>\r\n### Известные баги\r\n* Может выставиться тег `found`, но не выставиться `rtsp` — особенность скрипта `rtsp-methods` в `nmap`.\r\n\r\n<a name=\"history\"></a>\r\n### История версий\r\n\r\n( https://github.com/voaoom/webcamscan/releases )\r\n\r\n**v3** — 2015-10-18\r\n* Теперь необходим `bash` v.4 и `pcregrep`.\r\n* Скрипт разделен на несколько скриптов: `./wcs-discover.sh`, `./wcs-deepscan.sh` и `./wcs-full.sh`.\r\n* Добавлен: `./wcs-brute.sh`.\r\n* Добавлена поддержка `stdin` и `stdout` — можно использовать [в конвеерах](https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80_(UNIX)).\r\n\r\n**v2** — 2015-10-14\r\n* Переписано на функциях, более структурированный и оптимизированный код.\r\n* Изменения тегов:\r\n    * `tcp` переименован в `il`.\r\n    * `rtsp` переименован в `found`.\r\n    * Добавлен (другой) `rtsp`.\r\n* Добавлен параметр `SAVE_NO_FLAGS`.\r\n* Параметр `BRUTEFORCE_TIMELIMIT` по умолчанию изменен с `1m` до `2m` + внутринние изменения о таймаутах.\r\n* Добавлены записи в `rtsp-urls.txt` для видеорегистораторов RVi.\r\n\r\n**v1** — 2015-10-13\r\n* Первый релиз.","google":"UA-68986849-1","note":"Don't delete this file! It's used internally to help with page regeneration."}